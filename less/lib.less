
.bg-color(@color:@bg-color) {
  background-color: @color ;
}
// semi trans
.bg-transparent(@trans:0.5) {
  background-color: rgba(0,0,0,@trans);
}


.text-color(@color:@text-color) {
  color:@color;
}

.text(@color) {
  .text-color(@color);
  .bg-color(contrast(@color));
}


@shade-diff:10%;

@darker : darken(@dark , @shade-diff);
@darkest : darken(@darker , @shade-diff);

@lighter : lighten(@light , @shade-diff);
@lightest : lighten(@lighter , @shade-diff);


/*
  make the .text- and .bg- color classes
 */
.make-color-classes(@list) {
  .iter(length(@list));
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@list, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);
    .text-@{key} {
      color: @value;
    }
    .bg-@{key} {
      background-color: @value;
    }

  }
}
/*

  next - combine the colours into allowed combinations

 */

.make-color-combos(@text,@bg) {
  .iter-i(length(@text));
  .iter-i(@i) when (@i > 0) {
    //.iter-i(@i - 1);
    @text_pair: extract(@text, @i);
    @text_key: extract(@text_pair, 1);
    @text_value: extract(@text_pair, 2);

    .iter-j(length(@bg));
    .iter-j(@j) when (@j > 0) {
      //.iter-j(@j - 1);
      @bg_pair: extract(@bg, @j);
      @bg_key: extract(@bg_pair, 1);
      @bg_value: extract(@bg_pair, 2);

      // avoid rules where color=bg based on avlue rather than name - color aliases
      .@{text_key}-on-@{bg_key} when not (@text_value = @bg_value) {
        //color: @text_value;
        //background-color: @bg_value;
        .text-color(@text_value);
        .bg-color(@bg_value);
      }
      .iter-j(@j - 1);
    }
    .iter-i(@i - 1);
  }
}

@gradient-ltr : 270deg;
@gradient-rtl : 90deg;
@gradient-ttb : 180deg;
@gradient-btt : 0deg;

.gradient(@start : @bg-color , @end : @text-color , @deg: @gradient-ltr) {
  background: linear-gradient(@deg, @start, @end);
    /* For Safari 5.1 to 6.0 */
  background: -webkit-linear-gradient(left, @start, @end);
    /* For Opera 11.1 to 12.0 */
  background: -moz-linear-gradient(right, @start , @end );

}

  /*
    icons
   */
@icon-spacing : 0.5em;
.icon-before(@utf) {
  &:before {
    content: @utf ;
    margin-right: @icon-spacing;
  }
}
.icon-after(@utf) {
  &:after {
    content: @utf ;
    margin-left: @icon-spacing;
  }
}



/*
  boxes

  apply box or round-border classes

 */
.box(@radius:@border-radius,@width:@border-width,@padding:@box-padding)  {
  .round-border(@radius,@width);
  padding : @padding !important;
}

.round-border(@radius : @border-radius , @width : @border-width) {
  border : 1px solid @highlight;
  border-radius: @radius;
  moz-border-radius: @radius;
  webkit-border-radius: @radius;
  border-width: @width !important;  // needed!!
}


.shadow() {
  @trans1 : 0.3 ;
  @trans2 : 0.3 ;

  /*
    0 hor for top border. 1px to show
    -1 for right border to hide hor, 1 for vert
   */

  // h v blur spread color [inset]
  -webkit-box-shadow: 0 1px 1px rgba(0,0,0,0.3), -1px 1px 1px rgba(0,0,0,0.2);
  -moz-box-shadow: 0 1px 1px rgba(0,0,0,0.3), -1px 1px 1px rgba(0,0,0,0.2);
  box-shadow: 0 1px 1px rgba(0,0,0,@trans1), -1px 1px 1px rgba(0,0,0,@trans2);
  //box-shadow: 0 1px 1px rgba(0,0,0,0.3), -1px 1px 1px rgba(0,0,0,0.2);
}
/*
    work on different shadow borders top, right etc...
 */
.a_shadow(@hor:1px,@vert:1px) {
  @blur : 1px;
  @spread : 1px;
  @trans : 0.3 ;
  @color : rgba(0,0,0,@trans);

  // h v blur spread color [inset]
  -webkit-box-shadow: @hor @vert @blur @color;  // , -1px 1px 1px rgba(0,0,0,0.2);
  //-webkit-box-shadow: 0 1px 1px rgba(0,0,0,0.3), -1px 1px 1px rgba(0,0,0,0.2);
  -moz-box-shadow: @hor @vert @blur @color; //, -1px 1px 1px rgba(0,0,0,0.2);
  //-moz-box-shadow: 0 1px 1px rgba(0,0,0,0.3), -1px 1px 1px rgba(0,0,0,0.2);
  box-shadow: @hor @vert @blur @color;  //, -1px 1px 1px rgba(0,0,0,@trans2);
  //box-shadow: 0 1px 1px rgba(0,0,0,0.3), -1px 1px 1px rgba(0,0,0,0.2);
}

